#!/bin/bash

##################
# Constants {{{1 #
##################

PROG_NAME=$(basename $0)
VERSION=1.0
YES=yes

#########################
# Global variables {{{1 #
#########################

DEBUG=0
CONTAINER_IMAGE=
#CMDS_FILE=test_cmds.txt
CMDS_FILE=
REPO="BioContainers/containers"
GITHUB_STATUS_TOKEN=$GITHUB_AUTH_TOKEN
COMMIT=$COMMIT_SHA1
PR_ID=$PULL_REQUEST_ID

###################
# Print help {{{1 #
###################

function print_help {
	echo "Usage: $PROG_NAME [options] container_image"
	echo
	echo "   -t, --test-cmds            Path to test-cmds file."
	echo "   -g, --debug                Debug mode."
	echo "   -h, --help                 Print this help message."
}

############
# Msg {{{1 #
############

function msg {

	local tag=$1
	shift
	local code_level=1
	is_numeric=$(echo $1 | grep '^[0-9]*$')
	if [ -n "$is_numeric" ] ; then
		code_level=$1
		shift
	fi
	local msg=$1

	# Check tag
	if [ -z "$tag" -o \( "$tag" != INFO -a "$tag" != DEBUG -a "$tag" != ERROR \) ] ; then
		echo "ERROR: Unvalid message tag \"$tag\"." >&2
		exit 999
	fi

	# Print message
	[ "$tag" = DEBUG -a "$DEBUG" -lt "$code_level" ] || echo "$tag: $msg" >&2

	# Exit
	[ $tag = ERROR ] && exit $code_level
}

#################
# Requires {{{1 #
#################

function requires {

	local prg=$1

	[ -n "$(which $prg)" ] || msg ERROR "Cannot find $prg. Please install required package."
}

##################
# Read args {{{1 #
##################

function read_args {

	local args="$*" # save arguments for debugging purpose

	# Read options
	while true ; do
		shift_count=1
		case $1 in
			-g|--debug)             DEBUG=$((DEBUG + 1)) ;;
			-h|--help)              print_help ; exit 0 ;;
			-t|--test-cmds)		shift; CMDS_FILE=$1 ;; 
			-|--|--*)               msg ERROR "Illegal option $1." ;;
			-?)                     msg ERROR "Unknown option $1." ;;
			-[^-]*) split_opt=$(echo $1 | sed 's/^-//' | sed 's/\([a-zA-Z]\)/ -\1/g') ; set -- $1$split_opt "${@:2}" ;;
			*) break
		esac
		shift $shift_count
	done
	shift $((OPTIND - 1))

	# Read remaining arguments
	[ $# -eq 1 ] || msg ERROR "You must set one, and only one, container image."
	CONTAINER_IMAGE=$1

	# Debug
	msg DEBUG 1 "Arguments are : $args"
}

########################
# Test container {{{ 1 #
########################

function test_container {

	local entrypoint=$1
	local args=$2
	local entrypoint_arg=

	[ -z "$entrypoint" ] || entrypoint_arg="--entrypoint=$1"

	echo "Running the following command:"
	echo "docker run $entrypoint_arg $CONTAINER_IMAGE $args"
	#docker run $entrypoint_arg $CONTAINER_IMAGE $args || exit 1
	{
		docker run $entrypoint_arg $CONTAINER_IMAGE $args &&
		return 0
	} || {
		return 1
	}
}

################
# Send comment #
################

function send_comment {
	local comment=$1
	local hdr1="Accept: application/vnd.github.v3+json"
	local hdr2="Authorization: token $GITHUB_STATUS_TOKEN"
	local githuburl="https://api.github.com/repos/$REPO/commits/$COMMIT/comments"
	if [ -n "$PR_ID" ] ; then
		hdr1="Accept:application/vnd.github.v3.raw+json"
		githuburl="https://api.github.com/repos/$REPO/issues/$PR_ID/comments"
	fi
	#echo "Cmd sent:"
	#echo "curl -H '$hdr1' -H '$hdr2' -d '{\"body\": \"$comment\"}' $githuburl"
	#echo
	curl -H "$hdr1" \
		-H "$hdr2" \
		-d "{\"body\": \"$comment\"}" \
		"$githuburl"
}

###############
# Send status #
###############

function send_status {
	local software=$1
	local status=$2
	local msg=$3
	local stat_disp="success"
	local hdr1="Accept: application/vnd.github.v3+json"
	local hdr2="Authorization: token $GITHUB_STATUS_TOKEN"
	#case success in 
}

#############
# MAIN {{{1 #
#############

# Requirements
requires docker

# Read arguments
read_args "$@"

# Test
if [ -f "$CMDS_FILE" ] ; then
	while read line ; do
		has_entrypoint=$(echo $line | grep '^[^-]')
		if [ -n "$has_entrypoint" ] ; then
			entrypoint=$(echo $line | sed 's/^\([^ ]*\).*$/\1/')
			args=$(echo $line | sed 's/^[^ ]*\(.*\)$/\1/')
		else
			entrypoint=
			args=$line
		fi
		#test_container "$entrypoint" "$args"
		test_container "$entrypoint" "$args" || echo "Test FAILED"
	done <"$CMDS_FILE"
else
	echo "No $CMDS_FILE (test file) present, skipping tests"
	send_comment "No $CMDS_FILE (test file) present, skipping tests"
fi
